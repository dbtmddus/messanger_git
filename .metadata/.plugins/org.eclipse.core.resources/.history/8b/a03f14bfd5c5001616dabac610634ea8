package send_file_basic;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;

public class client {

	public final static int SOCKET_PORT = 13267;      // you may change this
	public final static String SERVER = "127.0.0.1";  // localhost
	public final static String FILE_TO_RECEIVED = "qkf_downloaded.png";  // you may change this, I give a

	public final static int FILE_SIZE = 6022386; // file size temporary hard coded
	// should bigger than the file to be downloaded

	public static void main (String [] args ) throws IOException {
		int bytesRead;
		int current = 0;
		FileOutputStream fos = null;
		BufferedOutputStream bos = null;
		Socket sock = null;
		try {
			sock = new Socket(SERVER, SOCKET_PORT);
			System.out.println("Connecting...");

			// receive file
			byte [] mybytearray  = new byte [FILE_SIZE];
			InputStream is = sock.getInputStream();
			fos = new FileOutputStream(FILE_TO_RECEIVED);
			bos = new BufferedOutputStream(fos);

			//bytesRead = is.read(mybytearray,0,mybytearray.length);	//?? 왜 수행?? 비어있는지 확인하려고? 어차피 아래서 0부터 다시 읽기때문에 문제는 없으나 왜 수행하는지
			//current = bytesRead;		//1번안. 어디까지 읽었는지 저장할 값임		//?? 이것도 왜수행??
			current = 0;				//2번안. 가독성 위해 위 2줄 대신 직접 넣은 부분. 사실 필요는 없으나 초기화 해주자.
			while( (bytesRead=is.read(mybytearray, current, (mybytearray.length-current)))  > 0) {	//반복문으로 하는 이유 - len값을 크게 설정하더라도, 실제로는 한번에 다 읽어오지 못함. 현제 65536 정도
				current += bytesRead;	// read하면서 실제 파일 길이 측정, 값 저장
			}
			bos.write(mybytearray, 0 , current);		//실제 길이만큼 write
			
			bos.flush();
			System.out.println("File " + FILE_TO_RECEIVED
					+ " downloaded (" + current + " bytes read)");
		}
		finally {
			if (fos != null) fos.close();
			if (bos != null) bos.close();
			if (sock != null) sock.close();
		}
	}

}